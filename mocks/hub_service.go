// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/perfectbuii/gokit/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// HubService is an autogenerated mock type for the HubService type
type HubService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, hub
func (_m *HubService) Create(ctx context.Context, hub *models.Hub) error {
	ret := _m.Called(ctx, hub)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Hub) error); ok {
		r0 = rf(ctx, hub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *HubService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *HubService) GetByID(ctx context.Context, id string) (*models.Hub, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Hub
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Hub); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Hub)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, offset, limit
func (_m *HubService) GetList(ctx context.Context, offset int, limit int) ([]*models.Hub, error) {
	ret := _m.Called(ctx, offset, limit)

	var r0 []*models.Hub
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*models.Hub); ok {
		r0 = rf(ctx, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Hub)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, hub
func (_m *HubService) Update(ctx context.Context, id string, hub *models.Hub) error {
	ret := _m.Called(ctx, id, hub)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.Hub) error); ok {
		r0 = rf(ctx, id, hub)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewHubService interface {
	mock.TestingT
	Cleanup(func())
}

// NewHubService creates a new instance of HubService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHubService(t mockConstructorTestingTNewHubService) *HubService {
	mock := &HubService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
